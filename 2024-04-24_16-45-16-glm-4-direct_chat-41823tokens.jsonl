{"task_id": "HumanEval/0", "completion": "\"for i in range(len(numbers)):\\n    for j in range(i + 1, len(numbers)):\\n        if abs(numbers[i] - numbers[j]) < threshold:\\n            return True\\nreturn False\""}
{"task_id": "HumanEval/1", "completion": "\"stack = []\\nresult = []\\ncurrent_group = ''\\n\\nfor char in paren_string.replace(' ', ''):\\n    if char == '(':\\n        if stack:\\n            current_group += char\\n        stack.append(char)\\n    elif char == ')':\\n        stack.pop()\\n        if stack:\\n            current_group += char\\n        else:\\n            current_group += char\\n            result.append(current_group)\\n            current_group = ''\\nreturn result\""}
{"task_id": "HumanEval/10", "completion": "\"def make_palindrome(string: str) -> str:\\n    if not string:\\n        return string\\n\\n    # Find the longest palindromic suffix\\n    for i in range(len(string), -1, -1):\\n        if string[:i] == string[:i][::-1]:\\n            # Append the reverse of the remaining prefix to the string\\n            return string + string[i:][::-1]\""}
{"task_id": "HumanEval/100", "completion": "\"stones_in_each_level = []\\nfor i in range(n):\\n    if i == 0:\\n        stones_in_each_level.append(n)\\n    else:\\n        if n % 2 == 0:\\n            stones_in_each_level.append(stones_in_each_level[i-1] + 2)\\n        else:\\n            stones_in_each_level.append(stones_in_each_level[i-1] + 2 * (i % 2))\\n\\nreturn stones_in_each_level\""}
{"task_id": "HumanEval/101", "completion": "\\n    # Use regular expression to split the string by commas or spaces\\n    words = re.split(r'[,\\\\s]+', s)\\n    # Remove any empty strings resulting from split\\n    return [word for word in words if word]\""}
{"task_id": "HumanEval/102", "completion": "\"if x > y or x < 0 or y < 0:\\n    return -1\\n\\n# Start from y and move backwards to x to find the biggest even number\\nfor i in range(y, x - 1, -1):\\n    if i % 2 == 0:\\n        return i\\n\\nreturn -1\""}
{"task_id": "HumanEval/103", "completion": "\\n    if n > m:\\n        return -1\\n\\n    total_sum = sum(range(n, m + 1))\\n    average = round(total_sum / (m - n + 1))\\n    return bin(average)\\n```\\n\\nThis implementation calculates the sum of all integers from `n` to `m` (inclusive) and then divides it by the count of numbers to get the average. It rounds the result to the nearest integer and converts it to its binary representation using the `bin()` function. If `n` is greater than `m`, it returns `-1` as specified.\""}
{"task_id": "HumanEval/104", "completion": "\\n    result = []\\n    for num in x:\\n        has_even_digit = False\\n        for digit in str(num):\\n            if int(digit) % 2 == 0:\\n                has_even_digit = True\\n                break\\n        if not has_even_digit:\\n            result.append(num)\\n    return sorted(result)\\n```\""}
{"task_id": "HumanEval/105", "completion": "\\n    filtered = [x for x in arr if 1 <= x <= 9]\\n    sorted_arr = sorted(filtered)\\n    reversed_arr = sorted_arr[::-1]\\n    return [dig_to_name[x] for x in reversed_arr]\""}
{"task_id": "HumanEval/106", "completion": "\"result = []\\nfor i in range(1, n + 1):\\n    if i % 2 == 0:\\n        fact = 1\\n        for j in range(1, i + 1):\\n            fact *= j\\n        result.append(fact)\\n    else:\\n        result.append(sum(range(1, i + 1)))\\nreturn result\""}
{"task_id": "HumanEval/107", "completion": "\"even_count = 0\\nodd_count = 0\\n\\nfor i in range(1, n):\\n    num_str = str(i)\\n    if num_str == num_str[::-1]:\\n        if i % 2 == 0:\\n            even_count += 1\\n        else:\\n            odd_count += 1\\n\\nreturn (even_count, odd_count)\""}
{"task_id": "HumanEval/108", "completion": "\"count = 0\\nfor num in arr:\\n    sum_of_digits = 0\\n    is_negative = False\\n    if num < 0:\\n        is_negative = True\\n        num = -num\\n    while num > 0:\\n        sum_of_digits += num % 10\\n        num //= 10\\n    if sum_of_digits > 0 or (is_negative and sum_of_digits != 0):\\n        count += 1\\nreturn count\""}
{"task_id": "HumanEval/109", "completion": "\\n    if not arr:\\n        return True\\n\\n    n = len(arr)\\n    sorted_arr = sorted(arr)\\n\\n    for i in range(n):\\n        if arr == sorted_arr:\\n            return True\\n        arr = [arr[-1]] + arr[:-1]\\n\\n    return False\\n```\""}
{"task_id": "HumanEval/11", "completion": "\"result = []\\n    for i in range(len(a)):\\n        if a[i] == b[i]:\\n            result.append('0')\\n        else:\\n            result.append('1')\\n    return ''.join(result)\""}
{"task_id": "HumanEval/110", "completion": "\\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\\n    odd_count_lst2 = sum(1 for x in lst2 if x % 2 != 0)\\n    \\n    # If the number of odd numbers in lst1 is even, they can be paired and exchanged\\n    # with an equal number of odd numbers from lst2.\\n    if odd_count_lst1 % 2 == 0:\\n        return \\\"YES\\\"\\n    # If the number of odd numbers in lst1 is odd, we need an odd number of odd numbers\\n    # in lst2 to exchange with, which would leave an even number of odd numbers in lst2.\\n    elif odd_count_lst2 % 2 != 0:\\n        return \\\"YES\\\"\\n    else:\\n        return \\\"NO\\\"\\n\\n# The following is the implementation of the function without the function header.\\n# Assuming the function name is 'exchange' as per your problem statement.\\n"}
{"task_id": "HumanEval/111", "completion": "\\n    # Split the string into a list of lowercase letters\\n    letters = test.split()\\n    \\n    # Count the occurrences of each letter using Counter\\n    letter_counts = Counter(letters)\\n    \\n    # Find the maximum count of any letter\\n    max_count = max(letter_counts.values()) if letter_counts else 0\\n    \\n    # Create a dictionary with letters that have the maximum count\\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\\n    \\n    return result\""}
{"task_id": "HumanEval/112", "completion": "\\n    # Create a set of characters to be deleted\\n    delete_chars = set(c)\\n    \\n    # Filter out the characters from s that are in c\\n    filtered_string = ''.join([char for char in s if char not in delete_chars])\\n    \\n    # Check if the result is a palindrome\\n    is_palindrome = filtered_string == filtered_string[::-1]\\n    \\n    # Return the result and the palindrome check\\n    return (filtered_string, is_palindrome)\\n```\""}
{"task_id": "HumanEval/113", "completion": "\\n    result = []\\n    for item in lst:\\n        count = sum(1 for digit in item if int(digit) % 2 != 0)\\n        formatted_string = \\\"the number of odd elements {}n the str{}ng {} of the {}nput.\\\".format(count, count, count, count)\\n        result.append(formatted_string)\\n    return result\\n```\\n\\nThis code iterates over each string in the input list, counts the number of odd digits in each string, and then formats the result string accordingly, replacing the i's with the actual count of odd digits. It then appends the formatted string to the result list, which is returned at the end.\""}
{"task_id": "HumanEval/114", "completion": "\\n    if not nums:\\n        return 0\\n    min_sum = float('inf')\\n    current_sum = 0\\n    for num in nums:\\n        current_sum = min(num, current_sum + num)\\n        min_sum = min(min_sum, current_sum)\\n    return min_sum\\n```\""}
{"task_id": "HumanEval/115", "completion": "\\n    total_buckets = 0\\n    for row in grid:\\n        row_buckets = math.ceil(sum(row) / capacity)\\n        total_buckets += row_buckets\\n    return total_buckets\""}
{"task_id": "HumanEval/116", "completion": "\"arr.sort(key=lambda x: (bin(x).count('1'), x))\""}
{"task_id": "HumanEval/117", "completion": "\\n    vowels = \\\"aeiouAEIOU\\\"\\n    words = s.split()\\n    result = []\\n\\n    for word in words:\\n        consonant_count = 0\\n        for letter in word:\\n            if letter not in vowels and letter.isalpha():\\n                consonant_count += 1\\n        if consonant_count == n:\\n            result.append(word)\\n\\n    return result\\n\\n# The above implementation can be used as the body for the select_words function.\\n# Below are the example usages of the implementation:\\nprint(implementation(\\\"Mary had a little lamb\\\", 4))  # Output: [\\\"little\\\"]\\nprint(implementation(\\\"Mary had a little lamb\\\", 3))  # Output: [\\\"Mary\\\", \\\"lamb\\\"]\\nprint(implementation(\\\"simple white space\\\", 2))      # Output: []\\nprint(implementation(\\\"Hello world\\\", 4))             # Output: [\\\"world\\\"]\\nprint(implementation(\\\"Uncle sam\\\", 3))               # Output: [\\\"Uncle\\\"]\\n```\\nThis implementation"}
{"task_id": "HumanEval/118", "completion": "\"vowels = \\\"AEIOUaeiou\\\"\\nword = reversed(word)\\nnext_char = None\\n\\nfor char in word:\\n    if char in vowels:\\n        if next_char and next_char not in vowels:\\n            return char\\n    next_char = char\\n\\nreturn \\\"\\\"\""}
{"task_id": "HumanEval/119", "completion": "\\n    s1 = lst[0]\\n    s2 = lst[1]\\n    stack = []\\n\\n    # Concatenate both strings\\n    combined_str = s1 + s2\\n\\n    # Iterate through the combined string\\n    for char in combined_str:\\n        if char == '(':\\n            stack.append(char)\\n        elif char == ')':\\n            if stack:\\n                stack.pop()\\n            else:\\n                return 'No'\\n\\n    # If the stack is empty, all parentheses are balanced\\n    if not stack:\\n        return 'Yes'\\n    else:\\n        return 'No'\""}
{"task_id": "HumanEval/12", "completion": "\"max_string = None\\nfor s in strings:\\n    if max_string is None or len(s) > len(max_string):\\n        max_string = s\\nreturn max_string\""}
{"task_id": "HumanEval/120", "completion": "\"arr.sort()\\nreturn arr[-k:]\""}
{"task_id": "HumanEval/121", "completion": "\"lst = [5, 8, 7, 1]\\n\\n# Implementation\\nsum_of_odds = 0\\nfor i in range(1, len(lst), 2):\\n    if lst[i] % 2 != 0:\\n        sum_of_odds += lst[i]\\n\\n# This would be the return statement in the actual function\\nsum_of_odds\""}
{"task_id": "HumanEval/122", "completion": "\"sum_of_elements = 0\\n\\nfor i in range(min(k, len(arr))):\\n    if abs(arr[i]) < 100:\\n        sum_of_elements += arr[i]\\n\\nreturn sum_of_elements\""}
{"task_id": "HumanEval/123", "completion": "\\n    if n <= 0:\\n        return []\\n    while n != 1:\\n        collatz_sequence.append(n)\\n        if n % 2 == 0:\\n            n = n // 2\\n        else:\\n            n = 3 * n + 1\\n    collatz_sequence.append(1)\\n\\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\\n    return sorted(odd_numbers)\""}
{"task_id": "HumanEval/124", "completion": "\\n    if not date:\\n        return False\\n\\n    # Check the format\\n    if not re.match(r'\\\\d{2}-\\\\d{2}-\\\\d{4}', date):\\n        return False\\n\\n    # Extract month, day and year\\n    month, day, year = map(int, date.split('-'))\\n\\n    # Check month\\n    if month < 1 or month > 12:\\n        return False\\n\\n    # Check days\\n    if month in [1, 3, 5, 7, 8, 10, 12]:\\n        if day < 1 or day > 31:\\n            return False\\n    elif month in [4, 6, 9, 11]:\\n        if day < 1 or day > 30:\\n            return False\\n    elif month == 2:\\n        # Check leap year\\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\\n            if day < 1 or day > 29:\\n                return False\\n        else:\\n            if day < 1 or day > 28:\\n                return False\\n\\n    return True\""}
{"task_id": "HumanEval/125", "completion": "\"if ' ' in txt:\\n    return txt.split(' ')\\nelif ',' in txt:\\n    return txt.split(',')\\nelse:\\n    count = sum(ord(char) - ord('a') % 2 for char in txt if char.islower())\\n    return count\""}
{"task_id": "HumanEval/126", "completion": "\"seen = {}\\nfor i, num in enumerate(lst):\\n    if num in seen:\\n        return False\\n    if i > 0 and num < lst[i - 1]:\\n        return False\\n    seen[num] = True\\nreturn True\""}
{"task_id": "HumanEval/127", "completion": "\\n    if n <= 1:\\n        return False\\n    for i in range(2, int(n**0.5) + 1):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\n"}
{"task_id": "HumanEval/128", "completion": "\"if not arr:\\n    return None\\n\\nproduct_of_signs = 1\\nsum_of_magnitudes = 0\\n\\nfor num in arr:\\n    product_of_signs *= (1 if num > 0 else -1 if num < 0 else 0)\\n    sum_of_magnitudes += abs(num)\\n\\nreturn product_of_signs * sum_of_magnitudes\""}
{"task_id": "HumanEval/129", "completion": "\\n    n = len(grid)\\n    min_path = None\\n\\n    # Helper function to get the neighbors of a cell\\n"}
{"task_id": "HumanEval/13", "completion": "\"```\\nwhile b:\\n    a, b = b, a % b\\nreturn a\\n```\""}
{"task_id": "HumanEval/130", "completion": "\\n    sequence = [1, 3]\\n    if n <= 1:\\n        return sequence[:n+1]\\n    for i in range(2, n):\\n        if i % 2 == 0:\\n            sequence.append(1 + i // 2)\\n        else:\\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\\n    return sequence\\n\\n# Test cases\\nprint(tribonacci(3))  # Output: [1, 3, 2, 8]\\nprint(tribonacci(0))  # Output: [1]\\nprint(tribonacci(1))  # Output: [1, 3]\""}
{"task_id": "HumanEval/131", "completion": "\"```\\nproduct = 1\\nwhile n > 0:\\n    digit = n % 10\\n    if digit % 2 != 0:\\n        product *= digit\\n    n = n // 10\\nif product == 1:\\n    return 0\\nelse:\\n    return product\\n```\""}
{"task_id": "HumanEval/132", "completion": "\"stack = []\\n\\nfor char in string:\\n    if char == '[':\\n        stack.append(char)\\n    elif char == ']' and stack:\\n        if stack[-1] == '[':\\n            if len(stack) > 1:\\n                return True\\n            stack.pop()\\n        else:\\n            stack.append(char)\\n    else:\\n        stack.clear()\\n\\nreturn False\""}
{"task_id": "HumanEval/133", "completion": "\"\\\"\\\"\\\"\\nThis implementation iterates through the list, rounds each element up to the nearest integer (ceiling),\\nsquares it, and adds it to the sum. Finally, it returns the sum of squared numbers.\\n\\\"\\\"\\\"\\n\\nsum_of_squares = 0\\nfor number in lst:\\n    # Round each element to the upper int (ceiling) and square it\\n    squared = int(math.ceil(number)) ** 2\\n    # Add the squared number to the sum\\n    sum_of_squares += squared\\n# Return the sum of squared numbers\\nreturn sum_of_squares\""}
{"task_id": "HumanEval/134", "completion": "\"if not txt:\\n    return False\\nif txt[-1].isalpha():\\n    words = txt.split()\\n    if not words[-1] or not words[-1][-1].isalpha():\\n        return True\\nreturn False\""}
{"task_id": "HumanEval/135", "completion": "\"n = len(arr)\\n    max_index = -1\\n    for i in range(1, n):\\n        if arr[i] < arr[i - 1]:\\n            max_index = i - 1\\n    return max_index\""}
{"task_id": "HumanEval/136", "completion": "\"largest = None\\nsmallest = None\\n\\nnegative_integers = [x for x in lst if x < 0]\\npositive_integers = [x for x in lst if x > 0]\\n\\nif negative_integers:\\n    largest = max(negative_integers)\\nif positive_integers:\\n    smallest = min(positive_integers)\\n\\nreturn (largest, smallest)\""}
{"task_id": "HumanEval/137", "completion": "\\n        if isinstance(value, str):\\n            return float(value.replace(',', '.'))\\n        return float(value)\\n\\n    # Convert back to original type if necessary\\n"}
{"task_id": "HumanEval/138", "completion": "\\n    # We need exactly 4 even numbers, so start with 2 and go up to n//2 (to ensure we don't go over n)\\n    for i in range(2, n//2 + 1, 2):  # Increment by 2 to only consider even numbers\\n        for j in range(i, n//2 + 1, 2):  # Start from i to avoid repetition and ensure we don't go over n\\n            for k in range(j, n//2 + 1, 2):  # Start from j for the same reasons\\n                l = n - i - j - k  # The fourth number is the remaining amount needed to sum to n\\n                if l > 0 and l % 2 == 0:  # Check if l is positive and even\\n                    return True\\n    return False\\n```\\n\\nThis code uses three nested loops to iterate through possible values for the first three even numbers (i, j, k) and calculates the fourth number (l) as the remaining sum needed to reach `n`. If such a combination is found, it returns `True`. If no such combination exists, it returns `False`.\""}
{"task_id": "HumanEval/139", "completion": "\\n    result = 1\\n    for i in range(1, n + 1):\\n        temp = 1\\n        for j in range(1, i + 1):\\n            temp *= j\\n        result *= temp\\n    return result\""}
{"task_id": "HumanEval/14", "completion": "\"prefixes = []\\n    for i in range(1, len(string) + 1):\\n        prefixes.append(string[:i])\\n    return prefixes\""}
{"task_id": "HumanEval/140", "completion": "\"while '  ' in text:\\n    text = text.replace('  ', '-')\\ntext = text.replace(' ', '_')\\nreturn text\""}
{"task_id": "HumanEval/141", "completion": "\\n    # Check if there is exactly one dot in the file name\\n    if file_name.count('.') != 1:\\n        return 'No'\\n\\n    # Split the file name into name and extension\\n    name, extension = file_name.split('.')\\n\\n    # Check if the substring before the dot is not empty and starts with a letter\\n    if not name or not name[0].isalpha():\\n        return 'No'\\n\\n    # Check if there are not more than three digits in the file name\\n    if sum(char.isdigit() for char in name) > 3:\\n        return 'No'\\n\\n    # Check if the substring after the dot is one of the valid extensions\\n    if extension not in ['txt', 'exe', 'dll']:\\n        return 'No'\\n\\n    return 'Yes'\\n```\""}
{"task_id": "HumanEval/142", "completion": "\"result = 0\\nfor i in range(len(lst)):\\n    if i % 3 == 0:\\n        result += lst[i] ** 2\\n    if i % 4 == 0 and i % 3 != 0:\\n        result += lst[i] ** 3\\nreturn result\""}
{"task_id": "HumanEval/143", "completion": "\\n    if length < 2:\\n        return False\\n    for i in range(2, int(length**0.5) + 1):\\n        if length % i == 0:\\n            return False\\n    return True\\n\\n"}
{"task_id": "HumanEval/144", "completion": "\\n    x_num, x_den = map(int, x.split('/'))\\n    n_num, n_den = map(int, n.split('/'))\\n    \\n    product_num = x_num * n_num\\n    product_den = x_den * n_den\\n    \\n    gcd = lambda a, b: a if b == 0 else gcd(b, a % b)\\n    \\n    simplified_den = product_den // gcd(product_num, product_den)\\n    \\n    return simplified_den == 1\""}
{"task_id": "HumanEval/145", "completion": "\\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x).replace('-', '')), nums.index(x)))\""}
{"task_id": "HumanEval/146", "completion": "\\n    count = 0\\n    for num in nums:\\n        if num > 10:\\n            str_num = str(abs(num))\\n            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\\n                count += 1\\n    return count\\n\\n# Test cases\\nprint(special_filter([15, -73, 14, -15]))  # Output should be 1\\nprint(special_filter([33, -2, -3, 45, 21, 109]))  # Output should be 2\\n```\""}
{"task_id": "HumanEval/147", "completion": "\\n    a = [i * i - i + 1 for i in range(1, n + 1)]\\n    count = 0\\n    mod_dict ="}
{"task_id": "HumanEval/148", "completion": "\\n    if planet1 not in planets or planet2 not in planets:\\n        return ()\\n    \\n    index1 = planets.index(planet1)\\n    index2 = planets.index(planet2)\\n    \\n    if index1 < index2:\\n        return tuple(planets[index1 + 1:index2])\\n    else:\\n        return tuple(planets[index2 + 1:index1])[::-1]\""}
{"task_id": "HumanEval/149", "completion": "\"filtered_list = [s for s in lst if len(s) % 2 == 0]\\nsorted_list = sorted(filtered_list, key=lambda s: (len(s), s))\\nreturn sorted_list\""}
{"task_id": "HumanEval/15", "completion": "\"result = \\\"\\\"\\nfor i in range(n + 1):\\n    result += str(i)\\n    if i != n:\\n        result += \\\" \\\"\\nreturn result\""}
{"task_id": "HumanEval/150", "completion": "\\n    if n <= 1:\\n        return False\\n    if n <= 3:\\n        return True\\n    if n % 2 == 0 or n % 3 == 0:\\n        return False\\n    i = 5\\n    while i * i <= n:\\n        if n % i == 0 or n % (i + 2) == 0:\\n            return False\\n        i += 6\\n    return True\\n\\n"}
{"task_id": "HumanEval/151", "completion": "\"sum([x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0]) if lst else 0\""}
{"task_id": "HumanEval/152", "completion": "\"game = [1,2,3,4,5,1]\\nguess = [1,2,3,4,2,-2]\\n\\nresult = [abs(guess[i] - game[i]) for i in range(len(game))]\\nprint(result)\\n\\n# Output: [0, 0, 0, 0, 3, 3]\""}
{"task_id": "HumanEval/153", "completion": "\\n    max_strength = float('-inf')\\n    strongest_extension = None\\n\\n    for extension in extensions:\\n        CAP = sum(1 for char in extension if char.isupper())\\n        SM = sum(1 for char in extension if char.islower())\\n        strength = CAP - SM\\n\\n        if strength > max_strength:\\n            max_strength = strength\\n            strongest_extension = extension\\n\\n    return f\\\"{class_name}.{strongest_extension}\\\"\""}
{"task_id": "HumanEval/154", "completion": "\"for i in range(len(b)):\\n    rotation = b[i:] + b[:i]\\n    if rotation in a:\\n        return True\\nreturn False\""}
{"task_id": "HumanEval/155", "completion": "\"```\\ncount_even = 0\\ncount_odd = 0\\nnum = abs(num)\\nwhile num > 0:\\n    digit = num % 10\\n    if digit % 2 == 0:\\n        count_even += 1\\n    else:\\n        count_odd += 1\\n    num //= 10\\nreturn (count_even, count_odd)\\n```\""}
{"task_id": "HumanEval/156", "completion": "\\n    roman_numerals = {\\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\\n    }\\n    result = ''\\n    for value in sorted(roman_numerals.keys(), reverse=True):\\n        while number >= value:\\n            result += roman_numerals[value]\\n            number -= value\\n    return result.lower()\\n```\""}
{"task_id": "HumanEval/157", "completion": "\"```python\\n    # Check if the input sides can form a triangle\\n    if a + b > c and a + c > b and b + c > a:\\n        # Check if the square of the longest side is equal to the sum of the squares of the other two sides\\n        sides = sorted([a, b, c])\\n        if sides[2]**2 == sides[0]**2 + sides[1]**2:\\n            return True\\n    return False\\n```\""}
{"task_id": "HumanEval/158", "completion": "\"max_word = \\\"\\\"\\nmax_unique_chars = -1\\n\\nfor word in words:\\n    unique_chars = len(set(word))\\n    if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\\n        max_word = word\\n        max_unique_chars = unique_chars\\n\\nreturn max_word\""}
{"task_id": "HumanEval/159", "completion": "\"total_eaten = number + need\\nleft_over = max(remaining - need, 0)\\nreturn [total_eaten, left_over]\""}
{"task_id": "HumanEval/16", "completion": "\"set.fromkeys(string.lower()).__len__()\""}
{"task_id": "HumanEval/160", "completion": "\\n    result = operands[0]\\n    for i in range(len(operators)):\\n        op = operators[i]\\n        if op == '+':\\n            result += operands[i + 1]\\n        elif op == '-':\\n            result -= operands[i + 1]\\n        elif op == '*':\\n            result *= operands[i + 1]\\n        elif op == '//':\\n            result //= operands[i + 1]\\n        elif op == '**':\\n            result **= operands[i + 1]\\n    return result\\n\\n"}
{"task_id": "HumanEval/161", "completion": "\\n    # Check if the string contains any letters\\n    has_letters = any(char.isalpha() for char in s)\\n\\n    # If there are no letters, simply reverse the string\\n    if not has_letters:\\n        return s[::-1]\\n\\n    # If there are letters, reverse the case of each letter and keep other characters as is\\n    result = []\\n    for char in s:\\n        if char.isalpha():\\n            # Reverse the case of the letter\\n            if char.islower():\\n                result.append(char.upper())\\n            else:\\n                result.append(char.lower())\\n        else:\\n            # Keep the character as is\\n            result.append(char)\\n\\n    # Join the list of characters to form the final string\\n    return ''.join(result)\\n```\""}
{"task_id": "HumanEval/162", "completion": "\\n    if text == \\\"\\\":\\n        return None\\n    else:\\n        md5_hash = hashlib.md5(text.encode())\\n        return md5_hash.hexdigest()\""}
{"task_id": "HumanEval/163", "completion": "\"result = []\\nfor num in range(a, b + 1):\\n    if num % 2 == 0:\\n        result.append(num)\\nreturn result\""}
{"task_id": "HumanEval/17", "completion": "\"music_legend = {\\n    'o': 4,\\n    'o|': 2,\\n    '.|': 1\\n}\\n\\ndef parse_music(music_string: str) -> List[int]:\\n    notes = music_string.split()\\n    result = []\\n    for note in notes:\\n        result.append(music_legend[note])\\n    return result\\n\\n# Test\\nmusic_string = 'o o| .| o| o| .| .| .| .| o o'\\nprint(parse_music(music_string))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\""}
{"task_id": "HumanEval/18", "completion": "\"count = 0\\nindex = 0\\n\\nwhile index < len(string):\\n    current_index = string.find(substring, index)\\n    if current_index != -1:\\n        count += 1\\n        index = current_index + 1\\n    else:\\n        break\\n\\nreturn count\""}
{"task_id": "HumanEval/19", "completion": "\"numerals = {\\n    'zero': 0,\\n    'one': 1,\\n    'two': 2,\\n    'three': 3,\\n    'four': 4,\\n    'five': 5,\\n    'six': 6,\\n    'seven': 7,\\n    'eight': 8,\\n    'nine': 9\\n}\\n\\n# Implementation\\nnumbers_list = numbers.split()\\nsorted_numbers = sorted(numbers_list, key=lambda x: numerals[x])\\nreturn ' '.join(sorted_numbers)\""}
{"task_id": "HumanEval/2", "completion": "\"number -= int(number)\\nreturn number if number > 0 else 0.0\""}
{"task_id": "HumanEval/20", "completion": "\"numbers.sort()\\nmin_diff = float('inf')\\nresult = (0, 0)\\n\\nfor i in range(len(numbers) - 1):\\n    diff = numbers[i + 1] - numbers[i]\\n    if diff < min_diff:\\n        min_diff = diff\\n        result = (numbers[i], numbers[i + 1])\\n\\nreturn result\""}
{"task_id": "HumanEval/21", "completion": "\\n    return (num - min_num) / (max_num - min_num)\\n\\nreturn [linear_transform(num) for num in numbers]\""}
{"task_id": "HumanEval/22", "completion": "\\n    return [value for value in values if isinstance(value, int)]\\n```\""}
{"task_id": "HumanEval/23", "completion": "\\n    count = 0\\n    for char in string:\\n        count += 1\\n    return count\\n\\n# The following lines are for testing purposes and would usually not be included in the implementation.\\n# However, they are here to demonstrate how the function could be tested according to the doctests provided.\\nif __name__ == \\\"__main__\\\":\\n    import doctest\\n    doctest.testmod(extraglobs={'strlen': strlenimplementation})\\n\""}
{"task_id": "HumanEval/24", "completion": "\"for i in range(n-1, 0, -1):\\n    if n % i == 0:\\n        return i\\nreturn 1  # if no divisor is found, then 1 is the largest divisor of any number.\""}
{"task_id": "HumanEval/25", "completion": "\"factors = []\\n    # Handle 2 separately to make the later loop more efficient\\n    while n % 2 == 0:\\n        factors.append(2)\\n        n //= 2\\n\\n    # Check for odd factors starting from 3\\n    factor = 3\\n    max_factor = int(n**0.5) + 1\\n    while factor <= max_factor:\\n        while n % factor == 0:\\n            factors.append(factor)\\n            n //= factor\\n            max_factor = int(n**0.5) + 1\\n        factor += 2\\n\\n    # If n is not 1, then the remaining n is a prime number\\n    if n != 1:\\n        factors.append(n)\\n\\n    return factors\""}
{"task_id": "HumanEval/26", "completion": "\\n    seen = set()\\n    result = []\\n    for number in numbers:\\n        if number not in seen:\\n            seen.add(number)\\n            result.append(number)\\n    return result\\n```\""}
{"task_id": "HumanEval/27", "completion": "\"```\\nresult = \\\"\\\"\\nfor char in string:\\n    if char.islower():\\n        result += char.upper()\\n    elif char.isupper():\\n        result += char.lower()\\n    else:\\n        result += char\\nreturn result\\n```\""}
{"task_id": "HumanEval/28", "completion": "\"return ''.join(strings)\""}
{"task_id": "HumanEval/29", "completion": "\\n    return [s for s in strings if s.startswith(prefix)]\\n```\""}
{"task_id": "HumanEval/3", "completion": "\"balance = 0\\n\\nfor operation in operations:\\n    balance += operation\\n    if balance < 0:\\n        return True\\n\\nreturn False\""}
{"task_id": "HumanEval/30", "completion": "\"filter(lambda x: x > 0, l)\""}
{"task_id": "HumanEval/31", "completion": "\"if n <= 1:\\n    return False\\nfor i in range(2, int(n ** 0.5) + 1):\\n    if n % i == 0:\\n        return False\\nreturn True\""}
{"task_id": "HumanEval/32", "completion": "\\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\\n    \\n    # Newton's method\\n    for _ in range(100):  # Run the iteration a fixed number of times\\n        x1 = x0 - poly(xs, x0) / derivative(xs, x0)\\n        if abs(x1 - x0) < 1e-10:  # Check for convergence\\n            return x1\\n        x0 = x1\\n\\n    # If the method doesn't converge within the iteration limit, return the last approximation\\n    return x0\""}
{"task_id": "HumanEval/33", "completion": "\\n    # Extract the elements at indices that are divisible by three\\n    third_indices_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\\n    # Sort these elements\\n    third_indices_elements.sort()\\n    \\n    # Create a new list to store the result\\n    sorted_l = l.copy()\\n    \\n    # Iterate over the indices that are divisible by three\\n    for i in range(len(sorted_l)):\\n        if i % 3 == 0:\\n            # Replace the element at the index with the sorted element\\n            sorted_l[i] = third_indices_elements.pop(0)\\n    \\n    return sorted_l\\n```\""}
{"task_id": "HumanEval/34", "completion": "\"set_l = set(l)\\nreturn sorted(set_l)\""}
{"task_id": "HumanEval/35", "completion": "\"if not l:\\n    raise ValueError(\\\"List is empty\\\")\\nmax_val = l[0]\\nfor item in l:\\n    if item > max_val:\\n        max_val = item\\nreturn max_val\""}
{"task_id": "HumanEval/36", "completion": "\"count = 0\\nfor i in range(n):\\n    if i % 11 == 0 or i % 13 == 0:\\n        count += str(i).count('7')\\nreturn count\""}
{"task_id": "HumanEval/37", "completion": "\"even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\\neven_indices_values.sort()\\nresult = l.copy()\\n\\nfor i in range(len(l)):\\n    if i % 2 == 0:\\n        result[i] = even_indices_values.pop(0)\\n\\nreturn result\""}
{"task_id": "HumanEval/38", "completion": "\\n    \\\"\\\"\\\"\\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\\n    \\\"\\\"\\\"\\n    # split string to groups. Each of length 3, except possibly the last one.\\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\\n    # decode each group by rotating it back. Only if group has length 3.\\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\\n    return \\\"\\\".join(groups)\\n```\\nThis function works by splitting the input string into groups of three characters (except possibly the last group, which may be shorter). It then rotates each group to the left by one character to decode the string. This is the inverse operation of the `encode_cyclic` function provided.\""}
{"task_id": "HumanEval/39", "completion": "\\n    if num < 2:\\n        return False\\n    for i in range(2, int(num ** 0.5) + 1):\\n        if num % i == 0:\\n            return False\\n    return True\\n\\n"}
{"task_id": "HumanEval/4", "completion": "\"mean_value = sum(numbers) / len(numbers)\\nabsolute_deviations = [abs(x - mean_value) for x in numbers]\\nreturn sum(absolute_deviations) / len(numbers)\""}
{"task_id": "HumanEval/40", "completion": "\"for i in range(len(l) - 2):\\n    for j in range(i + 1, len(l) - 1):\\n        for k in range(j + 1, len(l)):\\n            if l[i] + l[j] + l[k] == 0:\\n                return True\\nreturn False\""}
{"task_id": "HumanEval/41", "completion": "\\n    # Since the number of collisions is equal to the number of cars moving in each direction,\\n    # we can simply return the value of n that would have been passed as an argument.\\n    # However, since the function header is not to be included, we assume the value of n is provided\\n    # by the context or an external input mechanism.\\n    n = # Assume n is"}
{"task_id": "HumanEval/42", "completion": "\"return [x + 1 for x in l]\""}
{"task_id": "HumanEval/43", "completion": "\"for i in range(len(l)):\\n    for j in range(i+1, len(l)):\\n        if l[i] + l[j] == 0:\\n            return True\\nreturn False\""}
{"task_id": "HumanEval/44", "completion": "\\n    if x < 0:\\n        raise ValueError(\\\"Input number must be non-negative\\\")\\n    if base < 2 or base > 9:\\n        raise ValueError(\\\"Base must be between 2 and 9\\\")\\n\\n    result = []\\n    while x > 0:\\n        result.append(str(x % base))\\n        x //= base\\n\\n    return ''.join(reversed(result))\\n```\""}
{"task_id": "HumanEval/45", "completion": "\"/*****\\n* This function calculates the area of a triangle given the length of a side (a)\\n* and the height (h) from that side. It returns the area of the triangle.\\n*****/\\nreturn 0.5 * a * h\""}
{"task_id": "HumanEval/46", "completion": "\\n    if n < 2:\\n        return [0, 0, 2, 0][n]\\n    fib = [0] * (n + 1)\\n    fib[2] = 2\\n    for i in range(3, n + 1):\\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\\n    return fib[n]\\n```\""}
{"task_id": "HumanEval/47", "completion": "\"l.sort()\\nn = len(l)\\nif n % 2 == 1:\\n    return l[n // 2]\\nelse:\\n    return (l[n // 2 - 1] + l[n // 2]) / 2\""}
{"task_id": "HumanEval/48", "completion": "\"left, right = 0, len(text) - 1\\n    while left < right:\\n        if text[left] != text[right]:\\n            return False\\n        left += 1\\n        right -= 1\\n    return True\""}
{"task_id": "HumanEval/49", "completion": "\\n    result = 1\\n    base = 2\\n    base %= p  # Ensure base is within the modulo p\\n\\n    while n > 0:\\n        # If n is odd, multiply the result with base and take modulo p\\n        if n % 2 == 1:\\n            result = (result * base) % p\\n        # Square the base and take modulo p\\n        base = (base * base) % p\\n        # Divide n by 2\\n        n //= 2\\n\\n    return result\\n```\\n\\nThis code snippet efficiently calculates \\\\( 2^n \\\\) modulo \\\\( p \\\\) by squaring the base and reducing the exponent by half each iteration. When the exponent is odd, it multiplies the result with the base and takes the modulo \\\\( p \\\\) to keep the numbers within a manageable range.\""}
{"task_id": "HumanEval/5", "completion": "\"result = []\\nfor i in range(len(numbers)):\\n    if i > 0:\\n        result.append(delimeter)\\n    result.append(numbers[i])\\nreturn result\""}
{"task_id": "HumanEval/50", "completion": "\"\\\"\\\".join([chr(((ord(ch) - 5 - ord(\\\"a\\\")) % 26) + ord(\\\"a\\\")) for ch in s])\""}
{"task_id": "HumanEval/51", "completion": "\\n    vowels = \\\"aeiouAEIOU\\\"\\n    result = \\\"\\\"\\n    for char in text:\\n        if char not in vowels:\\n            result += char\\n    return result\\n```\""}
{"task_id": "HumanEval/52", "completion": "\"for num in l:\\n    if num >= t:\\n        return False\\nreturn True\""}
{"task_id": "HumanEval/53", "completion": "\"x + y\""}
{"task_id": "HumanEval/54", "completion": "\\n    # Count the occurrences of each character in both strings\\n    counter0 = Counter(s0)\\n    counter1 = Counter(s1)\\n\\n    # Compare the two Counters to see if they are the same\\n    return counter0 == counter1\\n\\n# The following are the tests that would usually go into a function's docstring\\n# They are here for reference and can be used to validate the implementation.\\nassert implementation('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\\nassert implementation('abcd', 'dddddddabc') == True\\nassert implementation('dddddddabc', 'abcd') == True\\nassert implementation('eabcd', 'dddddddabc') == False\\nassert implementation('abcd', 'dddddddabce') == False\\nassert implementation('eabcdzzzz', 'dddzzzzzzzddddabc') == False\""}
{"task_id": "HumanEval/55", "completion": "\"```python\\nif n <= 0:\\n    raise ValueError(\\\"Input must be a positive integer\\\")\\nelif n == 1:\\n    return 0\\nelif n == 2:\\n    return 1\\nelse:\\n    a, b = 0, 1\\n    for _ in range(2, n):\\n        a, b = b, a + b\\n    return b\\n```\""}
{"task_id": "HumanEval/56", "completion": "\"stack = []\\n\\nfor bracket in brackets:\\n    if bracket == \\\"<\\\":\\n        stack.append(bracket)\\n    elif bracket == \\\">\\\":\\n        if stack:\\n            stack.pop()\\n        else:\\n            return False\\n\\nreturn not stack\""}
{"task_id": "HumanEval/57", "completion": "\"increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\\ndecreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\\n\\nreturn increasing or decreasing\""}
{"task_id": "HumanEval/58", "completion": "\"set1 = set(l1)\\nset2 = set(l2)\\ncommon_elements = sorted(set1.intersection(set2))\\nreturn common_elements\""}
{"task_id": "HumanEval/59", "completion": "\\n    if num < 2:\\n        return False\\n    for i in range(2, int(num ** 0.5) + 1):\\n        if num % i == 0:\\n            return False\\n    return True\\n\\n"}
{"task_id": "HumanEval/6", "completion": "\"stacks = []\\nresult = []\\n\\nfor group in paren_string.split():\\n    max_depth = 0\\n    current_depth = 0\\n    for char in group:\\n        if char == '(':\\n            current_depth += 1\\n            max_depth = max(max_depth, current_depth)\\n        elif char == ')':\\n            current_depth -= 1\\n    result.append(max_depth)\\n\\nreturn result\""}
{"task_id": "HumanEval/60", "completion": "\"total = 0\\n    for i in range(1, n + 1):\\n        total += i\\n    return total\""}
{"task_id": "HumanEval/61", "completion": "\"stack = []\\n\\nfor bracket in brackets:\\n    if bracket == '(':\\n        stack.append(bracket)\\n    elif bracket == ')':\\n        if stack:\\n            stack.pop()\\n        else:\\n            return False\\n\\nreturn not stack\""}
{"task_id": "HumanEval/62", "completion": "\"result = []\\n    for i in range(1, len(xs)):\\n        result.append(xs[i] * i)\\n    return result\""}
{"task_id": "HumanEval/63", "completion": "\\n    if n < 2:\\n        return 0\\n    if n == 2:\\n        return 1\\n    # Initialize a list to store the computed values\\n    fibfib_sequence = [0] * (n + 1)\\n    fibfib_sequence[2] = 1\\n    # Compute the sequence up to n\\n    for i in range(3, n + 1):\\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3]\\n    return fibfib_sequence[n]\\n```\\n\\nThis code snippet initializes a list to store the computed values of the fibfib sequence up to the n-th element. It then iterates through the sequence starting from the third element (index 2) and uses the recurrence relation to compute the next value. This method ensures that each value is calculated only once, making the function efficient.\""}
{"task_id": "HumanEval/64", "completion": "\"count = 0\\n    vowels = \\\"aeiouAEIOU\\\"\\n    for i, char in enumerate(s):\\n        if char in vowels:\\n            count += 1\\n        elif char == 'y' or char == 'Y':\\n            if i == len(s) - 1:\\n                count += 1\\n    return count\\n\\n# Test cases\\nassert vowels_count(\\\"abcde\\\") == 2\\nassert vowels_count(\\\"ACEDY\\\") == 3\\nassert vowels_count(\\\"hello\\\") == 2\\nassert vowels_count(\\\"world\\\") == 1\\nassert vowels_count(\\\"Python\\\") == 1\\nassert vowels_count(\\\"ify\\\") == 1\\nassert vowels_count(\\\"sky\\\") == 0\\nassert vowels_count(\\\"AEIOUaeiou\\\") == 10\\nassert vowels_count(\\\"bCdEfG\\\") == 2\""}
{"task_id": "HumanEval/65", "completion": "\"x_str = str(x)\\nshift = shift % len(x_str)\\n\\nif shift == 0:\\n    return x_str\\nelif shift < len(x_str):\\n    return x_str[-shift:] + x_str[:-shift]\\nelse:\\n    return x_str[::-1]\""}
{"task_id": "HumanEval/66", "completion": "\"sum(ord(c) for c in s if c.isupper())\""}
{"task_id": "HumanEval/67", "completion": "\\n    # Extract the number of apples and oranges from the string\\n    apples = int(s.split(' ')[0])\\n    oranges = int(s.split(' ')[3])\\n    \\n    # Calculate the number of mango fruits\\n    mangoes = n - apples - oranges\\n    return mangoes\\n\\n# Test cases\\nprint(fruit_distribution(\\\"5 apples and 6 oranges\\\", 19))  # Output: 8\\nprint(fruit_distribution(\\\"0 apples and 1 oranges\\\", 3))   # Output: 2\\nprint(fruit_distribution(\\\"2 apples and 3 oranges\\\", 100)) # Output: 95\\nprint(fruit_distribution(\\\"100 apples and 1 oranges\\\", 120)) # Output: 19\\n```\""}
{"task_id": "HumanEval/68", "completion": "\"min_value = float('inf')\\nmin_index = -1\\n\\nfor i, value in enumerate(arr):\\n    if value % 2 == 0 and value < min_value:\\n        min_value = value\\n        min_index = i\\n\\nif min_index != -1:\\n    return [min_value, min_index]\\nelse:\\n    return []\""}
{"task_id": "HumanEval/69", "completion": "\\n    frequency = Counter(lst)\\n    max_value = -1\\n    for num in frequency:\\n        if frequency[num] >= num and num > max_value:\\n            max_value = num\\n    return max_value\\n\\n# The above code should be included within the search function's body. Here it is provided as a separate function for clarity.\""}
{"task_id": "HumanEval/7", "completion": "\"return [s for s in strings if substring in s]\""}
{"task_id": "HumanEval/70", "completion": "\"lst.sort()\\nresult = []\\nwhile lst:\\n    if lst:\\n        result.append(lst.pop(0))  # Minimum value\\n    if lst:\\n        result.append(lst.pop())  # Maximum value\\nreturn result\""}
{"task_id": "HumanEval/71", "completion": "\\n    # Check if the sides form a valid triangle\\n    if a + b > c and a + c > b and b + c > a:\\n        # Calculate the semi-perimeter\\n        s = (a + b + c) / 2\\n        # Calculate the area using Heron's formula\\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\\n        # Return the area rounded to 2 decimal points\\n        return round(area, 2)\\n    else:\\n        # Return -1 if the sides do not form a valid triangle\\n        return -1\""}
{"task_id": "HumanEval/72", "completion": "\"if q == q[::-1] and sum(q) <= w:\\n    return True\\nelse:\\n    return False\""}
{"task_id": "HumanEval/73", "completion": "\\n    n = len(arr)\\n    changes = 0\\n    for i in range(n // 2):\\n        if arr[i] != arr[n - 1 - i]:\\n            changes += 1\\n    return changes\\n```\""}
{"task_id": "HumanEval/74", "completion": "\\n    total_chars_lst1 = sum(len(item) for item in lst1)\\n    total_chars_lst2 = sum(len(item) for item in lst2)\\n\\n    if total_chars_lst1 < total_chars_lst2:\\n        return lst1\\n    else:\\n        return lst2 if total_chars_lst1 != total_chars_lst2 else lst1\\n\\n# Test cases\\nprint(implementation([], []))  # \u279e []\\nprint(implementation(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\\nprint(implementation(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\\nprint(implementation(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\\nprint(implementation(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']\""}
{"task_id": "HumanEval/75", "completion": "\\n"}
{"task_id": "HumanEval/76", "completion": "\"while x > 1 and x % n == 0:\\n    x //= n\\nreturn x == 1\\n\\n\\n# or using log, but this assumes that x and n are positive and x is not zero\\nimport math\\nreturn math.log(x, n).is_integer() if x > 0 and n > 1 else x == 1 if n == 1 else False\""}
{"task_id": "HumanEval/77", "completion": "\\n    root = round(a ** (1. / 3))\\n    return root ** 3 == abs(a)\\n```\\n\\nThis implementation calculates the cube root of the input number `a`, rounds it to the nearest integer, and then cubes it again to check if it matches the original number. The use of `abs(a)` ensures that negative numbers are also correctly handled, as the cube of a negative number is still a cube.\""}
{"task_id": "HumanEval/78", "completion": "\\n    count = 0\\n    for digit in num:\\n        if digit in prime_hex_digits:\\n            count += 1\\n    return count\\n\\n# Test cases\\nprint(hex_key(\\\"AB\\\"))  # Output: 1\\nprint(hex_key(\\\"1077E\\\"))  # Output: 2\\nprint(hex_key(\\\"ABED1A33\\\"))  # Output: 4\\nprint(hex_key(\\\"123456789ABCDEF0\\\"))  # Output: 6\\nprint(hex_key(\\\"2020\\\"))  # Output: 2\""}
{"task_id": "HumanEval/79", "completion": "\\n    if decimal == 0:\\n        return \\\"db00db\\\"\\n    binary_string = 'db'\\n    mask = 1 << (decimal.bit_length() - 1)\\n    while mask > 0:\\n        if decimal & mask:\\n            binary_string += '1'\\n        else:\\n            binary_string += '0'\\n        mask >>= 1\\n    binary_string += 'db'\\n    return binary_string\\n\\n# Note: The above implementation assumes that the input will always be a non-negative integer.\\n# If the function is expected to handle negative numbers, additional steps would be required.\""}
{"task_id": "HumanEval/8", "completion": "\"sum_result = 0\\nproduct_result = 1\\n\\nfor number in numbers:\\n    sum_result += number\\n    product_result *= number\\n\\nreturn sum_result, product_result\""}
{"task_id": "HumanEval/80", "completion": "\"if len(s) < 3:\\n    return False\\nfor i in range(len(s) - 2):\\n    if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\\n        return False\\nreturn True\""}
{"task_id": "HumanEval/81", "completion": "\"letter_grades = []\\nfor gpa in grades:\\n    if gpa == 4.0:\\n        letter_grades.append('A+')\\n    elif gpa > 3.7:\\n        letter_grades.append('A')\\n    elif gpa > 3.3:\\n        letter_grades.append('A-')\\n    elif gpa > 3.0:\\n        letter_grades.append('B+')\\n    elif gpa > 2.7:\\n        letter_grades.append('B')\\n    elif gpa > 2.3:\\n        letter_grades.append('B-')\\n    elif gpa > 2.0:\\n        letter_grades.append('C+')\\n    elif gpa > 1.7:\\n        letter_grades.append('C')\\n    elif gpa > 1.3:\\n        letter_grades.append('C-')\\n    elif gpa > 1.0:\\n        letter_grades.append('D+')\\n    elif gpa > 0.7:\\n        letter_grades.append('D')\\n    elif gpa > 0.0:\\n        letter_grades.append('D-')\\n    else:\\n        letter_grades.append('E')\\n\\nreturn letter_grades\""}
{"task_id": "HumanEval/82", "completion": "\\n    if length <= 1:\\n        return False\\n    for i in range(2, int(length ** 0.5) + 1):\\n        if length % i == 0:\\n            return False\\n    return True\\n\\n"}
{"task_id": "HumanEval/83", "completion": "\"```\\nif n == 1:\\n    return 2\\nelse:\\n    # There are 9 choices for the first and last digit (1-9, excluding 0 and 1)\\n    # and 10 choices for each of the remaining n-2 digits (0-9).\\n    # So, the total count for numbers starting or ending with 1 is:\\n    # 9 * 10^(n-2) for each possibility (starting with 1 or ending with 1)\\n    # Since we are counting both starting and ending with 1, we need to add these up,\\n    # but we must subtract the overlap, which is the count of numbers that start and end with 1.\\n    # The count of numbers that start and end with 1 is the same as the count of n-2 digit numbers,\\n    # which is 9 * 10^(n-3).\\n    # Therefore, the total count is:\\n    # 2 * 9 * 10^(n-2) - 9 * 10^(n-3)\\n\\n    # We can simplify this to:\\n    # 9 * 10^(n-3) * (2 * 10 - 1)\\n    # Which is:\\n    # 9 * 10^(n-3) * 19\\n\\n    # Since 10^(n-3) is 1 followed by (n-3) zeros, we can write it as integer division:\\n    # 9 * (10**n // 10**3) * 19\\n    # Which simplifies to:\\n    # 9 * (10**(n-3)) * 19\\n\\n    return 9 * (10**(n-3)) * 19\\n```\""}
{"task_id": "HumanEval/84", "completion": "\"binary_sum = sum(int(digit) for digit in bin(N)[2:])\\nreturn bin(binary_sum)[2:]\""}
{"task_id": "HumanEval/85", "completion": "\"total = 0\\n    for i in range(1, len(lst), 2):\\n        if lst[i] % 2 == 0:\\n            total += lst[i]\\n    return total\""}
{"task_id": "HumanEval/86", "completion": "\"s.split(\\\" \\\").map{|word| word.chars.sort_by(&:ord).join }.join(\\\" \\\")\""}
{"task_id": "HumanEval/87", "completion": "\"result = []\\nfor row_index, row in enumerate(lst):\\n    row_coordinates = [(row_index, col_index) for col_index, value in sorted(enumerate(row), key=lambda x: x[1], reverse=True) if value == x]\\n    result.extend(row_coordinates)\\nreturn sorted(result, key=lambda x: (x[0], -x[1]))\""}
{"task_id": "HumanEval/88", "completion": "\"array_copy = array.copy()\\nsum_first_last = array_copy[0] + array_copy[-1] if array_copy else 0\\n\\nif sum_first_last % 2 == 0:\\n    array_copy.sort(reverse=True)\\nelse:\\n    array_copy.sort()\\n\\nreturn array_copy\""}
{"task_id": "HumanEval/89", "completion": "\\n    encrypted = \\\"\\\"\\n    for char in s:\\n        if char.isalpha():\\n            shift = (ord(char) - ord('a') + (2 * 2)) % 26\\n            encrypted += chr(ord('a') + shift)\\n        else:\\n            encrypted += char\\n    return encrypted\\n```\""}
{"task_id": "HumanEval/9", "completion": "\"result = []\\nmax_val = None\\n\\nfor num in numbers:\\n    if max_val is None or num >= max_val:\\n        max_val = num\\n    result.append(max_val)\\n\\nreturn result\""}
{"task_id": "HumanEval/90", "completion": "\"min1 = float('inf')\\nmin2 = float('inf')\\n\\nfor num in lst:\\n    if num < min1:\\n        min2 = min1\\n        min1 = num\\n    elif num < min2 and num != min1:\\n        min2 = num\\n\\nreturn min2 if min2 != float('inf') else None\""}
{"task_id": "HumanEval/91", "completion": "\"sentences = S.split('.')\\n    sentences = [s.strip() for s in sentences if s.strip() != '']\\n    boredoms = 0\\n    for sentence in sentences:\\n        if sentence.startswith(\\\"I\\\"):\\n            boredoms += 1\\n        elif sentence.endswith('!') or sentence.endswith('?'):\\n            if sentence.split(sentence[-1])[0].strip().startswith(\\\"I\\\"):\\n                boredoms += 1\\n    return boredoms\""}
{"task_id": "HumanEval/92", "completion": "\"if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\n    if x == y + z or y == x + z or z == x + y:\\n        return True\\n    else:\\n        return False\\nelse:\\n    return False\""}
{"task_id": "HumanEval/93", "completion": "\\n    encoded_message = \\\"\\\"\\n    vowels = \\\"aeiouAEIOU\\\"\\n    for char in message:\\n        if char.isalpha():\\n            if char.lower() in vowels:\\n                encoded_message += chr(ord(char) + 2).swapcase()\\n            else:\\n                encoded_message += char.swapcase()\\n        else:\\n            encoded_message += char\\n    return encoded_message\\n```\""}
{"task_id": "HumanEval/94", "completion": "\\n    if n < 2:\\n        return False\\n    for i in range(2, int(n**0.5) + 1):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\n"}
{"task_id": "HumanEval/95", "completion": "\"all_keys = dict.keys()\\nif not all_keys:\\n    return False\\n\\nis_lower = all_keys[0].islower()\\nis_upper = all_keys[0].isupper()\\n\\nfor key in all_keys:\\n    if not isinstance(key, str):\\n        return False\\n    if is_lower and not key.islower():\\n        return False\\n    if is_upper and not key.isupper():\\n        return False\\n\\nreturn True\""}
{"task_id": "HumanEval/96", "completion": "\\n    if num < 2:\\n        return False\\n    for i in range(2, num):\\n        if num % i == 0:\\n            return False\\n    return True\\n\\n"}
{"task_id": "HumanEval/97", "completion": "\"```\\nreturn (abs(a) % 10) * (abs(b) % 10)\\n```\""}
{"task_id": "HumanEval/98", "completion": "\"count = 0\\nfor i in range(0, len(s), 2):\\n    if s[i] in \\\"AEIOU\\\":\\n        count += 1\\nreturn count\""}
{"task_id": "HumanEval/99", "completion": "\"float_value = float(value)\\nreturn int(round(float_value + (0.5 if float_value > 0 else -0.5)))\""}
