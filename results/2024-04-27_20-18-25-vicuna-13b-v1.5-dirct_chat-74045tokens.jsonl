{"task_id": "HumanEval/0", "completion": "    if not numbers:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n        else:\n            open_count -= 1\n            if open_count == 0:\n                groups.append(paren_string[open_count:])\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    if number <= 0:\n        raise ValueError('Number must be positive')\n    else:\n        integer_part = math.floor(number)\n        decimal_part = number - integer_part\n        if decimal_part < 0:\n            decimal_part = 0\n        return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n        else:\n            balance -= op\n    return balance < 0"}
{"task_id": "HumanEval/4", "completion": "    if not numbers:\n        return 0.0\n    total_abs_deviation = 0.0\n    num_elements = len(numbers)\n    mean = sum(numbers) / num_elements\n    for number in numbers:\n        deviation = abs(number - mean)\n        total_abs_deviation += deviation\n    return total_abs_deviation / num_elements"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        if i + 1 < len(numbers):\n            result.append(delimeter)\n        else:\n            result.append(delimeter)\n        result.append(numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            result.append(stack.pop())\n        else:\n            continue\n    return result"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        sum_ = 0\n        product = 1\n        for num in numbers:\n            sum_ += num\n            product *= num\n        return (sum_, product)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    current_max = numbers[0]\n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    ' Find the shortest palindrome that begins with a supplied string. '\n    palindrome = string[::-1]\n    for i in range(len(string)):\n        if string[i:].__len__() > len(palindrome) and string[i:] == palindrome[::-1]:\n            palindrome = string[i:]\n    return string[:palindrome.find(string)] + palindrome"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        elif a[i] == '0' and b[i] == '0':\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    else:\n        return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return sorted(prefixes, key=len, reverse=True)"}
{"task_id": "HumanEval/15", "completion": "    result = ''\n    for i in range(n + 1):\n        result += str(i) + ' '\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set()\n    for char in string:\n        if char.isalpha():\n            distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    note_counts = {'o': 4, '|': 2, '.': 1}\n    counts = [0] * 12\n    for note in music_string:\n        if note in note_counts:\n            counts[note_counts[note]] += 1\n        else:\n            print(f'Invalid note: {note}')\n            return []\n    return counts"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        end = string.find(substring, start)\n        if end == -1:\n            break\n        count += end - start + 1\n        start = end + len(substring)\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    sorted_numbers = ' '.join(numbers_list)\n    return sorted_numbers"}
{"task_id": "HumanEval/20", "completion": "    if len(numbers) < 2:\n        raise ValueError('The list of numbers must have at least two elements.')\n    numbers.sort()\n    closest_elements = (numbers[0], numbers[-1])\n    closest_distance = float('inf')\n    for i in range(1, len(numbers) - 1):\n        current_distance = abs(closest_elements[0] - numbers[i]) + abs(closest_elements[1] - numbers[i])\n        if current_distance < closest_distance:\n            closest_distance = current_distance\n            closest_elements = (numbers[i], numbers[i + 1])\n    return closest_elements"}
{"task_id": "HumanEval/21", "completion": "    min_number = min(numbers)\n    max_number = max(numbers)\n    if min_number == max_number:\n        return [min_number] * len(numbers)\n    else:\n        step = (max_number - min_number) / (len(numbers) - 1)\n        result = [min_number]\n        for i in range(1, len(numbers)):\n            result.append(min_number + i * step)\n        return result"}
{"task_id": "HumanEval/22", "completion": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "    \" Return length of given string\\n    >>> strlen('')\\n    0\\n    >>> strlen('abc')\\n    3\\n    \"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    if n == 0:\n        return 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n // 2"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    for num in range(2, int(n ** 0.5) + 1):\n        if n % num == 0:\n            n /= num\n            factors.append(num)\n    for num in range(2, n + 1):\n        if num not in factors:\n            factors.append(num)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = set(numbers)\n    unique_list = list(unique_numbers)\n    if len(unique_list) == len(numbers):\n        return numbers\n    return unique_list"}
{"task_id": "HumanEval/27", "completion": "    lowercase_chars = 'abcdefghijklmnopqrstuvwxyz'\n    uppercase_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    for char in string:\n        if char in lowercase_chars:\n            result += uppercase_chars[lowercase_chars.index(char)]\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    result = ''\n    for string in strings:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    n = len(xs) // 2\n    if n == 0:\n        return 0\n    else:\n        x = -((xs[0] + xs[n]) / (2 * xs[n]))\n        for i in range(n):\n            y = poly(xs, x)\n            if y == 0:\n                return x\n            else:\n                x = x - y / xs[n]\n        return None"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l_sorted = [0] * n\n    for i in range(n):\n        if i % 3 == 0:\n            j = i + 1\n            while j < n and l[j] < l[i]:\n                (l_sorted[i], l[j]) = (l[j], l_sorted[i])\n                j += 1\n    return l_sorted"}
{"task_id": "HumanEval/34", "completion": "    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    unique_list.sort()\n    return unique_list"}
{"task_id": "HumanEval/35", "completion": "    'Return maximum element in the list.\\n    >>> max_element([1, 2, 3])\\n    3\\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\\n    123\\n    '\n    for i in range(len(l)):\n        if l[i] > l[-1]:\n            return l[i]\n    return l[-1]"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    even_indices = [i for i in range(n) if n % 2 == i]\n    even_sorted = sorted(l[even_indices])\n    odd_indices = [i for i in range(n) if n % 2 != i]\n    odd_unsorted = [l[i] for i in odd_indices]\n    return even_sorted + odd_unsorted"}
{"task_id": "HumanEval/38", "completion": "    '\\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\\n    '\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(groups[::-1])"}
{"task_id": "HumanEval/39", "completion": "    if n <= 1:\n        return n\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if all((fib(i) <= n and fib(i) > 1 for fib in [prime_fib(i), prime_fib(i + 1)])):\n                return i\n        return -1"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        j = i + 1\n        k = j + 1\n        if i > 0 and l[i] == l[j] and (l[j] == l[k]) and (l[i] + l[j] + l[k] == 0):\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    positions = [0] * n\n    for i in range(n):\n        positions[i] = i\n    collisions = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if positions[i] == positions[j]:\n                collisions[i] += 1\n    return sum(collisions)"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                if i != j:\n                    return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    'Given length of a side and high return area for a triangle.\\n    >>> triangle_area(5, 3)\\n    7.5\\n    '\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    (a, b, c, d) = (0, 0, 0, 0)\n    while b < n:\n        (a, b, c, d) = (b, a + b + c + d, c, d)\n    return a"}
{"task_id": "HumanEval/47", "completion": "    if len(l) % 2 == 0:\n        mid = len(l) // 2\n        return (l[mid] + l[mid - 1]) / 2\n    else:\n        mid = len(l) - 1\n        return l[mid]"}
{"task_id": "HumanEval/48", "completion": "    if not text:\n        return True\n    else:\n        return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    for _ in range(n):\n        result = result * result % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "    '\\n    takes as input string encoded with encode_shift function. Returns decoded string.\\n    '\n    shift = 5 - ord('a')\n    result = ''\n    for char in s:\n        char_code = ord(char) - shift\n        result += chr(char_code + ord('a'))\n    return result"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char in vowels:\n            result += '_'\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    (n0, n1) = (len(s0), len(s1))\n    if n0 != n1:\n        return False\n    for i in range(n0):\n        if s0[i] != s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif not stack:\n            return False\n        else:\n            top_char = stack.pop()\n            if top_char != char:\n                return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i - 1]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        for i in range(len(l)):\n            if l[i] >= l[i - 1]:\n                continue\n            else:\n                return False\n        return True"}
{"task_id": "HumanEval/58", "completion": "    unique_l1 = set(l1)\n    for element in l2:\n        if element in unique_l1:\n            unique_l1.remove(element)\n    common_elements = list(unique_l1)\n    common_elements.sort()\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        for i in range(int(n ** 0.5) + 3, n + 1, 2):\n            if n % i == 0:\n                return i\n        return n"}
{"task_id": "HumanEval/60", "completion": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return True"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        result[i] = xs[i + 1]\n    for i in range(n - 1, -1, -1):\n        result[i] += xs[i] * (i + 1)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n <= 1:\n        return n\n    else:\n        (a, b, c) = (0, 1, 1)\n        for _ in range(n - 1):\n            (a, b, c) = (b, a + b + c, a)\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    shifted_digits = digits[shift:] + digits[:shift]\n    if shift > len(digits):\n        shifted_digits = shifted_digits[::-1]\n    return str(sum(shifted_digits))"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            sum += ord(s[i])\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    (fruit_types, quantities) = (s.split(' and '), [int(q) for q in quantities.split(' ')])\n    apple_count = 0\n    orange_count = 0\n    mango_count = 0\n    for count in quantities:\n        if 'apples' in fruit_types:\n            apple_count += int(count)\n        elif 'oranges' in fruit_types:\n            orange_count += int(count)\n        elif 'mango' in fruit_types:\n            mango_count += int(count)\n    mango_count = n - apple_count - orange_count - mango_count\n    return mango_count"}
{"task_id": "HumanEval/68", "completion": "    smallest_even = min((x for x in arr if x % 2 == 0))\n    if smallest_even is None:\n        return []\n    smallest_even_index = next((i for (i, x) in enumerate(arr) if x == smallest_even), len(arr))\n    return [smallest_even, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for (num, freq_count) in freq.items():\n        if freq_count >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    else:\n        min_val = lst[0]\n        lst.pop(0)\n        max_val = max(lst)\n        sorted_lst = [min_val]\n        sorted_lst.append(max_val)\n        sorted_lst.extend(sorted(lst))\n        return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and (b + c > a):\n        return round((a + b + c) / 2, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if not is_balanced(q):\n        return False\n    if sum(q) > w:\n        return False\n    return True"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[[float('inf')] * (n + 1) for j in range(n + 1)] for i in range(n + 1)]\n    for i in range(n + 1):\n        (dp[i][i][0], dp[i][i][1]) = (0, 0)\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == j:\n                continue\n            if arr[i] == arr[j]:\n                (dp[i][j][0], dp[i][j][1]) = (dp[i + 1][j][0], dp[i + 1][j][1])\n            else:\n                (dp[i][j][0], dp[i][j][1]) = (min(dp[i + 1][j][0], dp[i][j + 1][0]) + 1, min(dp[i + 1][j][1], dp[i][j + 1][1]) + 1)\n    return dp[0][n][0]"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) == len(lst2):\n        return lst1\n    shorter_list = min(lst1, lst2)\n    longer_list = max(lst1, lst2)\n    total_chars = 0\n    for char in shorter_list:\n        total_chars += len(char)\n    if total_chars < len(longer_list):\n        return shorter_list\n    else:\n        return longer_list"}
{"task_id": "HumanEval/75", "completion": "    if a < 2:\n        return False\n    for num in range(2, int(a ** 0.5) + 1):\n        if all((a % num != 0 for num in range(2, int(a ** 0.5) + 1))):\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    else:\n        return a == int(a) ** 3"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    count = 0\n    for digit in num:\n        if digit.isdigit() and digit.isprime():\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len() - 2):\n        if s[i:i + 3] in s[i + 3:]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    if len(string) == 1:\n        return True\n    for i in range(2, int(len(string) / 2) + 1):\n        if all((string[i * j] == string[i * j + 1] for j in range(1, int(len(string) / i)))):\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10):\n        for j in range(i, n):\n            if str(i) == str(j)[0] and int(str(j)[1:]) == 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = ''\n    while N > 0:\n        digit = N % 2\n        binary_sum = str(digit) + binary_sum\n        N = N // 2\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    result = []\n    for (i, elem) in enumerate(lst):\n        if i % 2 == 1 and elem % 2 == 0:\n            result.append(elem)\n    return result"}
{"task_id": "HumanEval/86", "completion": "    def anti_shuffle(s):\n        # Split the string into words and keep track of the original order\n        words = s.split()\n        original_order = [i for i in range(len(words))]\n    \n        # Sort the words based on their ASCII values\n        sorted_words = sorted(words, key=lambda x: sum(ord(c) for c in x))\n    \n        # Reconstruct the string while preserving the original order of words and spaces\n        result = ''\n        for i, word in enumerate(sorted_words):\n            result += word\n            if i < len(original_order) - 1:\n                result +=''\n            else:\n                result += '\n    '\n    \n        return result"}
{"task_id": "HumanEval/87", "completion": "    row = []\n    for (i, row_lst) in enumerate(lst):\n        for (j, val) in enumerate(row_lst):\n            if val == x:\n                row.append((i, j))\n                break\n    return sorted(row, key=lambda x: x[0])"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    n = len(array)\n    if n == 1:\n        return array\n    sum = 0\n    for i in range(n):\n        sum += array[i]\n    if sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_alphabet = {'a': 'j', 'b': 'k', 'c': 'l', 'd': 'm', 'e': 'n', 'f': 'o', 'g': 'p', 'h': 'q', 'i': 'r', 'j': 's', 'k': 't', 'l': 'u', 'm': 'v', 'n': 'w', 'o': 'x', 'p': 'y', 'q': 'z', 'r': 'a', 's': 'b', 't': 'c', 'u': 'd', 'v': 'e', 'w': 'f', 'x': 'g', 'y': 'h', 'z': 'i'}\n    encrypted_alphabet = {chr(ord(letter) + 65): letter for letter in encrypted_alphabet.keys()}\n    encrypted_string = ''.join([encrypted_alphabet.get(c, c) for c in s])\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "    if not lst:\n        return None\n    else:\n        return lst[1]"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    for i in range(len(S)):\n        if S[i:i + 1] == 'I' and (i == 0 or S[i - 1] not in [\"'\", ', \"?\"]) and (i == len(S) - 1 or S[i+1] not in [\"\\'\", ', '?']):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == y - z or x == y + z or (x == y - z):\n        if all(map(int, [x, y, z])):\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    message = message.upper()\n    vowels = 'AEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message.lower()"}
{"task_id": "HumanEval/94", "completion": "    prime = None\n    for num in lst:\n        if all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))):\n            if prime is None or num > prime:\n                prime = num\n    sum_digits = 0\n    while prime > 0:\n        sum_digits += prime % 10\n        prime //= 10\n    return sum_digits"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    key_case_error = False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            key_case_error = True\n            break\n        if not key.islower() and (not key.isupper()):\n            key_case_error = True\n            break\n    if key_case_error:\n        return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    primes = [2]\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if all((i % p != 0 for p in primes)):\n            primes.append(i)\n    return primes[:min(len(primes), n)]"}
{"task_id": "HumanEval/97", "completion": "    a_str = str(a)\n    b_str = str(b)\n    product = 0\n    carry = 0\n    for i in range(len(a_str)):\n        unit_a = int(a_str[i])\n        unit_b = int(b_str[i])\n        product_digit = unit_a * unit_b + carry\n        carry = (product_digit >= 10) + (carry > 0)\n        product = product * 10 + product_digit\n    if carry:\n        product += carry\n    return product"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num % 1 == 0:\n        return num\n    closest_int = int(num - 0.5) if num > 0 else int(num + 0.5)\n    if abs(num - closest_int) == 0.5:\n        if num > 0:\n            return closest_int + 1\n        else:\n            return closest_int - 1\n    return closest_int"}
{"task_id": "HumanEval/100", "completion": "    pile = [n]\n    for i in range(1, n + 1):\n        if n % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 2 + (2 if pile[-1] % 2 == 0 else 1))\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = []\n    for word in s.split(','):\n        words.append(word.strip())\n    return words"}
{"task_id": "HumanEval/102", "completion": "    if x <= y:\n        for num in range(x, y + 1, 2):\n            if num not in [i for i in range(x, y) if i % 2 == 0]:\n                return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m + 1):\n            sum += i\n            count += 1\n        avg = sum / count\n        rounded_avg = round(avg)\n        binary = bin(rounded_avg)[2:].zfill(8)\n        return binary"}
{"task_id": "HumanEval/104", "completion": "    digits = [int(d) for d in ''.join(str(i)) for i in x]\n    seen = set()\n    result = []\n    for digit in digits:\n        if digit not in seen:\n            seen.add(digit)\n            result.append(digit)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    sorted_arr = sorted(arr, key=len)\n    result = []\n    for num in sorted_arr:\n        if 1 <= num <= 9:\n            name = 'One' if num == 1 else 'Two' if num == 2 else 'Three' if num == 3 else 'Four' if num == 4 else 'Five' if num == 5 else 'Six' if num == 6 else 'Seven' if num == 7 else 'Eight' if num == 8 else 'Nine' if num == 9 else ''\n            result.append(name)\n    result = result[::-1]\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if i == int(i[::-1]):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(map(int, str(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                (arr[j], arr[i]) = (arr[i], arr[j])\n                for k in range(len(arr)):\n                    arr[k] = arr[k + 1]\n                break\n    return all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1)))"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            j = i + 1\n            while j < len(lst1) and lst2[j] % 2 != 0:\n                j += 1\n            if j >= len(lst2):\n                return 'YES'\n            else:\n                (lst1[i], lst2[j]) = (lst2[j], lst1[i])\n    return 'NO'"}
{"task_id": "HumanEval/111", "completion": "    letters = test.lower().split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    if len(letter_count) == 1:\n        return {letter_count.keys()[0]: letter_count.values()[0]}\n    else:\n        return {letter: count for (letter, count) in letter_count.items() if count > 0}"}
{"task_id": "HumanEval/112", "completion": "    not_in_c = []\n    for char in s:\n        if char not in c:\n            not_in_c.append(char)\n    result = ''.join(not_in_c)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for (i, strg) in enumerate(lst):\n        odd_count = 0\n        for char in strg:\n            if char % 2 != 0:\n                odd_count += 1\n        result.append(f'the number of odd elements {odd_count}n the str{i + 1}ng {strg} of the 4nput.')\n    return result"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return float('inf')\n    n = len(nums)\n    min_sum = float('inf')\n    start = 0\n    for end in range(n):\n        cur_sum = sum(nums[start:end + 1])\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n            start = end + 1\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    (m, n) = (len(grid), len(grid[0]))\n    bucket_count = capacity * n\n    bucket_grid = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                bucket_grid[i][j] = 1\n    inflow = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if bucket_grid[i][j] > 0:\n                inflow[i][j] = capacity\n            else:\n                inflow[i][j] = 0\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                dp[i][j] = 0\n            elif i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif i == j + 1:\n                dp[i][j] = dp[i - 1][j - 1] + inflow[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1] + inflow[i - 1][j])\n    return dp[m][n]"}
{"task_id": "HumanEval/116", "completion": "    count_ones = [sum(map(lambda x: x // 2, str(num))) for num in arr]\n    sorted_indices = sorted(range(len(arr)), key=lambda i: count_ones[i])\n    sorted_array = [arr[i] for i in sorted_indices]\n    return sorted_array"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = 'aeiouAEIOU'\n    right_indices = [i for (i, char) in enumerate(word) if char in vowels]\n    if not right_indices:\n        return ''\n    left_indices = [i for (i, char) in enumerate(word) if char in 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ' and i < right_indices[0] and (i > 0)]\n    closest_index = min(left_indices, key=lambda i: abs(i - right_indices[0]))\n    return word[closest_index]"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        elif not stack:\n            return 'No'\n        elif stack[-1] == ')':\n            stack.pop()\n            if not stack:\n                return 'No'\n        else:\n            return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for (i, val) in enumerate(lst):\n        if val % 2 == 1 and i % 2 == 0:\n            sum += val\n    return sum"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    odd_collatz = []\n    current = n\n    while current != 1:\n        if current % 2 == 0:\n            current = current // 2\n        else:\n            current = 3 * current + 1\n        odd_collatz.append(current)\n    odd_collatz.sort()\n    return odd_collatz"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        (month, day, year) = map(int, date.split('-'))\n        if 1 <= month <= 12 and 1 <= day <= [31, 30, 31][month - 1] and (2000 <= year <= 2070):\n            return True\n    except ValueError:\n        pass\n    return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if len(words) == 1:\n        return [words[0]]\n    else:\n        return words"}
{"task_id": "HumanEval/126", "completion": "    if not lst:\n        return False\n    if len(lst) == 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1] + 1:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return 'NO'\n    else:\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        if intersection_end - intersection_start == 1:\n            return 'YES'\n        else:\n            return 'NO'"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    else:\n        result = 1\n        for num in arr:\n            if num > 0:\n                result *= num\n            else:\n                result *= -num\n        return result"}
{"task_id": "HumanEval/129", "completion": "    queue = [(0, 0)]\n    visited = {}\n    path = []\n    values = []\n    while queue:\n        (row, col) = queue.pop(0)\n        if (row, col) in visited:\n            continue\n        visited[row, col] = True\n        path.append((row, col))\n        values.append(grid[row][col])\n        if len(path) == k:\n            path.sort()\n            path.reverse()\n            return values[:k]\n        neighbors = [(row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)]\n        for neighbor in neighbors:\n            if neighbor in visited:\n                continue\n            queue.append(neighbor)\n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [1] + tri(n // 2)\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)"}
{"task_id": "HumanEval/131", "completion": "    if n % 2 == 0:\n        return 0\n    else:\n        odd_digits = 0\n        while n > 0:\n            if n % 2 != 0:\n                odd_digits = odd_digits * 10 + n % 10\n            n = n // 10\n        return odd_digits"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(round(x)) for x in lst]\n    sum = 0\n    for num in rounded_lst:\n        sum += num ** 2\n    return sum"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (not last_char.isupper()) and (not any((char.isalpha() for char in txt[:-1]))):\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    if not lst:\n        return (None, None)\n    neg_lst = [x for x in lst if x < 0]\n    pos_lst = [x for x in lst if x > 0]\n    if neg_lst:\n        a = max(neg_lst)\n    else:\n        a = None\n    if pos_lst:\n        b = min(pos_lst)\n    else:\n        b = None\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "    def compare_one(a, b):\n        if type(a) is not type(b):\n            return a if type(a) is not str else b\n        if isinstance(a, (int, float)):\n            return a if a > b else b if a == b else None\n        if isinstance(a, str):\n            return a if a.strip() > b if isinstance(b, str) else b if a == b else None\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    even_sum = 0\n    while n > 0:\n        even_sum += n % 2\n        n //= 2\n    return even_sum == n"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1) * special_factorial(n - 2) * ... * special_factorial(2) * special_factorial(1)"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(' ', '_')\n    while '__' in text:\n        text = text.replace('__', '-')\n    return text"}
{"task_id": "HumanEval/141", "completion": "    valid_chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    if not all((c in valid_chars for c in file_name)):\n        return 'No'\n    if len(file_name) >= 4 and file_name[0].isdigit() and file_name[1].isdigit() and file_name[2].isdigit():\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    extension = file_name.split('.')[-1]\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for (i, val) in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            result += val ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += val ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    result = ''\n    for word in words:\n        if all((w not in primes for w in word)):\n            result += word + ' '\n    return result.strip()"}
{"task_id": "HumanEval/144", "completion": "    x_int = int(x.replace('/', '').split(' ')[0])\n    n_int = int(n.replace('/', '').split(' ')[0])\n    if x_int * n_int == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    if not nums:\n        return []\n    nums.sort(key=lambda x: (-sum(map(int, str(x))), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or (num % 10 == 7) or (num % 10 == 9)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    valid_triples = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    valid_triples += 1\n    return valid_triples"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planets.remove(planet1)\n        planets.remove(planet2)\n        sorted_planets = sorted(planets, key=lambda x: (planets.index(x) + 1) * (93.0 / (1.0 + (planets.index(x) + 1) * 3.0)))\n        return tuple(sorted_planets)"}
{"task_id": "HumanEval/149", "completion": "    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=len, reverse=True)\n    sorted_lst = sorted(sorted_lst, key=lambda x: x if len(x) == len(sorted_lst[0]) else -len(x))\n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "    if all((n % i != 0 for i in range(2, int(n ** 0.5) + 1))):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    if not lst:\n        return 0\n    result = 0\n    for num in lst:\n        if num % 2 == 1 and num >= 0 and (num <= 9):\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = None\n    strongest_strength = float('inf')\n    for extension in extensions:\n        cap_count = sum((1 for c in extension if c.isupper()))\n        lower_count = sum((1 for c in extension if c.islower()))\n        strength = strongest_strength - (cap_count - lower_count)\n        if strength < strongest_strength or (strength == strongest_strength and extension < strongest_extension):\n            strongest_extension = extension\n            strongest_strength = strength\n    return f'{class_name}.{strongest_extension}' if strongest_extension else class_name"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        for i in range(len(b)):\n            if a[i:i + len(b)] == b:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'cx', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for (value, roman) in roman_numerals.items():\n        while number >= value:\n            result += roman\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a + b > c and a + c > b and (b + c > a):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_word = ''\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if need > remaining:\n        need = remaining\n    eaten = number + need\n    left = remaining - eaten\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    result = []\n    for i in range(len(operator) - 1):\n        (op, op1, op2) = operator[i]\n        op1_val = operand[i]\n        op2_val = operand[i + 1]\n        if op == '+':\n            result.append(op1_val + op2_val)\n        elif op == '-':\n            result.append(op1_val - op2_val)\n        elif op == '*':\n            result.append(op1_val * op2_val)\n        elif op == '/':\n            result.append(op1_val // op2_val)\n        elif op == '**':\n            result.append(op1_val ** op2_val)\n        else:\n            raise ValueError('Invalid operator')\n    return result[0]"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].lower() if s[i].isupper() else s[i].upper()\n        else:\n            result += s[i]\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b + 1, 2):\n        even_digits.append(num)\n    return sorted(even_digits)"}
